{
  "Reading Data": [
    {
      "key": "Space",
      "variants": [
        "By Id",
        "By Owner"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/spaces/fetch-spaces#find-and-load-single-space",
        "https://docs.subsocial.network/docs/develop/how-to-guides/spaces/fetch-spaces#find-and-load-space-ids-by-owner"
      ],
      "snippets": [
        "const spaceId = '1001'\nconst space = await api.findSpace({id: spaceId})\nreturn space",
        "const ownerAccountId = '5HYYeCa1Hae5YYGJ2pHskHLVrA7V5WjaSuSbntidhhD9qqgs' // Put any public key here. \n\n// Fetching ids of all the spaces by owner.\nconst spaceIds = await api.blockchain.spaceIdsByOwner(ownerAccountId)\n\n// Fetching space data from all ids.\nconst spaces = await api.findSpaces({ids: spaceIds})\nreturn spaces"
      ]
    },
    {
      "key": "Post",
      "variants": [
        "By Id",
        "By Space Id"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/posts/fetch-posts#find-and-load-a-single-post",
        "https://docs.subsocial.network/docs/develop/how-to-guides/posts/fetch-posts#find-and-load-post-ids-by-space-id"
      ],
      "snippets": [
        "const postId = '1' // Any post Id that you want to fetch.\nconst post = await api.findPost({id: postId})\nreturn post",
        "const spaceId = '1068'\nconst postIds = await api.blockchain.postIdsBySpaceId(spaceId)\n\nconst posts = await api.findPosts({ids: postIds})\nreturn posts"
      ]
    },
    {
      "key": "Profile",
      "variants": [
        "Single Account",
        "Multiple Accounts"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/profiles/fetch-profiles#find-and-load-a-single-profile",
        "https://docs.subsocial.network/docs/develop/how-to-guides/profiles/fetch-profiles#find-and-load-a-single-profile"
      ],
      "snippets": [
        "const accountId = '3tcZkDwdQ3dR3PMgrn8rSXBfUcZJkwmtDPvzoV3sqApSHqBw' // Any account address.\nconst profile = await api.findProfileSpace(accountId)\nreturn profile",
        "const accountIds = ['3tcZkDwdQ3dR3PMgrn8rSXBfUcZJkwmtDPvzoV3sqApSHqBw', '3rJriA6MiYj7oFXv5hgxvSuacenm8fk76Kb5TEEHcWWQVvii']\nconst profiles = await api.findProfileSpaces(accountIds)\nreturn profiles"
      ]
    },
    {
      "key": "Comments",
      "variants": [
        ""
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/comments/fetch-comments"
      ],
      "snippets": [
        "const postId = '104'\n\n// Get reply ids (comments) by parent post id and fetch posts by ids\nconst replyIds = await api.blockchain.getReplyIdsByPostId(idToBn(postId))\n\n// For getting comments use posts functions\nconst replies = await api.findPublicPosts(replyIds)\n return replies"
      ]
    },
    {
      "key": "Reactions",
      "variants": [
        "Single Reaction",
        "Multiple Reactions"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/reactions/fetch-reactions#get-reaction-ids",
        "https://docs.subsocial.network/docs/develop/how-to-guides/reactions/fetch-reactions#get-reactions"
      ],
      "snippets": [
        "const myAccount = '3rJriA6MiYj7oFXv5hgxvSuacenm8fk76Kb5TEEHcWWQVvii'\nconst postId = '104'\nconst reactionId = await api.blockchain.getPostReactionIdByAccount(myAccount, postId)\nconst reaction = await api.blockchain.findReaction(reactionId)\nreturn reaction",
        "const myAccount = '3sPZhdg9FWo88ALqT8fj6esXGZCvukCQv6WAmWGkTdetWozN'\n\nconst postIds = ['153', '150', '189']\n\nconst reactionIds = await api.blockchain.getPostReactionIdsByAccount(myAccount, postIds)\n// invalid ids are not included in the result\nconst reactions = await api.blockchain.findReactions(reactionIds)\n\nconst postToReactionMap = {}\npostIds.forEach((id, idx) => {\n    const reactionId = reactionIds[idx]\n    const reaction = reactions.find((reaction) => reaction.id.toString() === reactionId.toString())\n    postToReactionMap[id] = reaction || null\n})\n\nreturn postToReactionMap"
      ]
    },
    {
      "key": "Follows",
      "variants": [
        "Account Following",
        "Account Followers",
        "Space Followers"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/fetch-follow#accountsfollowedbyaccount",
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/fetch-follow#accountfollowers",
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/fetch-follow#spacefollowers"
      ],
      "snippets": [
        "const accountId = '5FL6L3g16cyHz5CQmA1JD4dXfSnsuEZPjVLv4oEW6UqESNh3'\nconst substrateApi = await api.blockchain.api\n\n// count only\nlet followingCount = (await api.blockchain.accountsFollowedCountByAccount(accountId)).toString()\n\n// following account addresses\nconst following = await substrateApi.query.accountFollows.accountsFollowedByAccount(accountId)\nreturn { followingCount, following }",
        "const accountId = '5EZVynPKXVgRW3pgmB5whqoFwEa94USMVyh68DexVJMNyR3p'\nconst substrateApi = await api.blockchain.api\n\n// count only\nlet followersCount = (await api.blockchain.accountFollowersCountByAccountId(accountId)).toString()\n\n// follower account addresses\nconst followers = await substrateApi.query.accountFollows.accountFollowers(accountId)\nreturn { followersCount, followers }",
        "const spaceId = '1245'\nconst substrateApi = await api.blockchain.api\n\nconst followers = await substrateApi.query.spaceFollows.spaceFollowers(spaceId)\nreturn followers"
      ]
    },
    {
      "key": "Domains",
      "variants": [
        "By Owner",
        "By Name",
        "By Space"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/",
        "https://docs.subsocial.network/docs/develop/",
        "https://docs.subsocial.network/docs/develop/"
      ],
      "snippets": [
        "const accountId = '5HYYeCa1Hae5YYGJ2pHskHLVrA7V5WjaSuSbntidhhD9qqgs'\nconst domains = await api.blockchain.domainsByOwner(accountId)\nreturn domains",
        "const domainName = 'olehmell.sub'\nconst domainDetails = await api.blockchain.registeredDomain(domainName)\nreturn domainDetails",
        "const accountId = '3osmnRNnrcScHsgkTJH1xyBF5kGjpbWHsGrqM31BJpy4vwn8'\nconst spaceId = '1245'\n\nconst domain = await api.blockchain.domainNameBySpaceId(accountId, spaceId)\nreturn { domainName: domain }"
      ]
    }
  ],
  "Writing Data": [
    {
      "key": "Space",
      "variants": [
        "Create",
        "Update"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/spaces/create-spaces#create-a-space",
        "https://docs.subsocial.network/docs/develop/how-to-guides/spaces/create-spaces#update-a-space"
      ],
      "snippets": [
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst cid = await ipfs.saveContent({\n  about: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS',\n  image: null,\n  name: 'Subsocial',\n  tags: [ 'subsocial' ]\n})\nconst substrateApi = await api.blockchain.api\n\nconst spaceTransaction = substrateApi.tx.spaces.createSpace(\n  IpfsContent(cid),\n  null // Permissions config (optional)\n)\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\nspaceTransaction.signAndSend(pair, logger)",
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst spaceId = '1002'\nconst content = {\n    about: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS'\n  }\n const cid = await api.ipfs.saveContent(content)\n\nconst update = {\n  content: IpfsContent(cid)\n}\n\nconst substrateApi = await api.blockchain.api\n\nconst spaceTransaction = substrateApi.tx.spaces.updateSpace(\n spaceId, update)\n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\nspaceTransaction.signAndSend(pair, logger)"
      ]
    },
    {
      "key": "Post",
      "variants": [
        "Regular",
        "Shared",
        "Update"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/posts/create-posts#a-regular-post",
        "https://docs.subsocial.network/docs/develop/how-to-guides/posts/create-posts#a-shared-post",
        "https://docs.subsocial.network/docs/develop/how-to-guides/posts/create-posts#update-a-post"
      ],
      "snippets": [
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst cid = await ipfs.saveContent({\n  title: \"What is Subsocial?\",\n  image: null,\n  tags: [ 'Hello world', 'FAQ' ],\n  body: 'Subsocial is an open protocol for decentralized social networks and marketplaces. It`s built with Substrate and IPFS.'\n})\nconst substrateApi = await api.blockchain.api\n\nconst spaceId = '1002' // The space in which you're posting.\nconst postTransaction = substrateApi.tx.posts.createPost(\n  spaceId,\n  { RegularPost: null }, // Creates a regular post.\n  IpfsContent(cid)\n)\n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\npostTransaction.signAndSend(pair, logger)",
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst spaceId = '1002' // The space in which you're posting.\nconst parentPostId = '1' // The original post you want to share.\n\n// Creating new sharedPostCid having shared message.\nconst sharedPostCid = await ipfs.saveContent({\n  body: 'Keep up the good work!'\n})\n\nconst substrateApi = await api.blockchain.api\nconst postTransaction = substrateApi.tx.posts.createPost(\n  spaceId, \n  { SharedPost: parentPostId }, // Creates a shared post.\n  IpfsContent(sharedPostCid)) \n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\npostTransaction.signAndSend(pair, logger)",
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst postId = '1' // Id of post which you want to update.\nconst substrateApi = await api.blockchain.api\n\nconst content = { title: \"What is Subsocial Parachain?\" }\nconst cid = await api.ipfs.saveContent(content)\n\nconst update = {\n\tcontent: IpfsContent(cid)\n}\n\n const postTransaction = substrateApi.tx.posts.updatePost(postId, update)\n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\npostTransaction.signAndSend(pair, logger)"
      ]
    },
    {
      "key": "Post Reaction",
      "variants": [
        "Create",
        "Update",
        "Delete"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/reactions/create-reactions#create-a-reaction",
        "https://docs.subsocial.network/docs/develop/how-to-guides/reactions/create-reactions#update-a-reaction",
        "https://docs.subsocial.network/docs/develop/how-to-guides/reactions/create-reactions#delete-a-reaction"
      ],
      "snippets": [
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst postId = '1' // Post Id you want to react on.\nconst substrateApi = await api.blockchain.api\n\nconst reactionTx = substrateApi.tx.reactions.createPostReaction(postId, 'Upvote')\n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\nreactionTx.signAndSend(pair, logger)",
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst postId = '1' // Post Id you want to update reaction on.\nconst reactionId = '2' // Reaction Id to update.\nconst substrateApi = await api.blockchain.api\n\nconst reactionTx = substrateApi.tx.reactions.updatePostReaction(postId, reactionId, 'Downvote')\n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\nreactionTx.signAndSend(pair, logger)",
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst postId = '1' // Post Id on which reaction you want to delete reaction.\nconst reactionId = '2' // Reaction Id to delete.\nconst substrateApi = await api.blockchain.api\n\nconst reactionTx = substrateApi.tx.reactions.deletePostReaction(postId, reactionId)\n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\nreactionTx.signAndSend(pair, logger)"
      ]
    },
    {
      "key": "Profile",
      "variants": [
        ""
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/profiles/create-profiles"
      ],
      "snippets": [
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst cid = await ipfs.saveContent({\n  about: 'Subsocial official account.',\n  avatar: '',\n  name: 'Subsocial',\n})\nconst substrateApi = await api.blockchain.api\n\nconst spaceTransaction = substrateApi.tx.spaces.createSpace(\n  IpfsContent(cid),\n  null // Permissions config (optional)\n)\nawait spaceTransaction.signAndSend(pair, logger)\nconst profileTx = substrateApi.tx.profiles.setProfile(spaceId);\n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\nprofileTx.signAndSend(pair, logger)"
      ]
    }
  ],
  "Energy": [
    {
      "key": "Generate",
      "variants": [
        ""
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/sdk/energy"
      ],
      "snippets": [
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst targetAddress = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY' // You can change it to any other account address.\n\nconst burnAmount = 1 // 1 SUB\n\nconst parsedBurnAmount = balanceWithDecimal(burnAmount, 12) // SUB token uses 10 decimals points, SOON (testnet) uses 12 decimals\n\n// or you can just multiply it manually\n// const parsedBurnAmount = burnAmount * 10 ** 12\n\nconst substrateApi = await api.blockchain.api\n\nconst tx = substrateApi.tx.energy.generateEnergy(targetAddress, parsedBurnAmount.toString())\n\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\ntx.signAndSend(pair, logger)"
      ]
    },
    {
      "key": "Fetch",
      "variants": [
        ""
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/sdk/energy"
      ],
      "snippets": [
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst targetAddress = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY' // You can change it to any other account address.\n\nconst burnAmount = 1 // 1 SUB\n\nconst parsedBurnAmount = convertToBalanceWithDecimal(burnAmount, 12) // SUB token uses 10 decimals points, SOON (testnet) uses 12 decimals\n\n// or you can just multiply it manually\n// const parsedBurnAmount = burnAmount * 10 ** 12\n\nconst substrateApi = await api.blockchain.api\n\nconst response = await substrateApi.query.energy.energyBalance(targetAddress)\n\nconst balance = convertToBalanceWithDecimal(response.toString(), 12)\n\nreturn {\n\tbalance\n}"
      ]
    }
  ],
  "Follows": [
    {
      "key": "Check if",
      "variants": [
        "Space Follower",
        "Account Follower"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/fetch-follow#isspacefollower",
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/fetch-follow#isaccountfollower"
      ],
      "snippets": [
        "const accountId = '5HYYeCa1Hae5YYGJ2pHskHLVrA7V5WjaSuSbntidhhD9qqgs'\nconst spaceId = '1'\n\nconst substrateApi = api.blockchain\nconst isFollower = await substrateApi.isSpaceFollower(accountId, spaceId)\nreturn {output: isFollower}",
        "const yourAccountId = '5HYYeCa1Hae5YYGJ2pHskHLVrA7V5WjaSuSbntidhhD9qqgs'\nconst otherAccountId = '5CohLWq2wXUF8s45YDoMPv5xpey7uc9KQx3CUXAFf6YM6Wxe'\n\nconst substrateApi = await api.blockchain\nconst isFollower = await substrateApi.isAccountFollower(yourAccountId, otherAccountId)\nreturn {output: isFollower}"
      ]
    },
    {
      "key": "Following",
      "variants": [
        "Space",
        "Account"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/create-follow#follow-a-space",
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/create-follow#follow-an-account"
      ],
      "snippets": [
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst spaceId = '1'\nconst substrateApi = await api.blockchain.api\nconst tx = substrateApi.tx.spaceFollows.followSpace(spaceId)\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\ntx.signAndSend(pair, logger)",
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst accountIdToFollow = '5HYYeCa1Hae5YYGJ2pHskHLVrA7V5WjaSuSbntidhhD9qqgs'\nconst substrateApi = await api.blockchain.api\nconst tx = substrateApi.tx.accountFollows.followAccount(accountIdToFollow)\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\ntx.signAndSend(pair, logger)"
      ]
    },
    {
      "key": "Unfollowing",
      "variants": [
        "Space",
        "Account"
      ],
      "links": [
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/create-follow#unfollow-a-space",
        "https://docs.subsocial.network/docs/develop/how-to-guides/follow/create-follow#unfollow-an-account"
      ],
      "snippets": [
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst spaceId = '1'\nconst substrateApi = await api.blockchain.api\nconst tx = substrateApi.tx.spaceFollows.unfollowSpace(spaceId)\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\ntx.signAndSend(pair, logger)",
        "const pair = keyring.addFromMnemonic('bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice')\n\nconst accountIdToUnfollow = '5HYYeCa1Hae5YYGJ2pHskHLVrA7V5WjaSuSbntidhhD9qqgs'\nconst substrateApi = await api.blockchain.api\nconst tx = substrateApi.tx.accountFollows.unfollowAccount(accountIdToUnfollow)\n// Check logger function code here: https://docs.subsocial.network/docs/develop/playground/#using-keyring\n\ntx.signAndSend(pair, logger)"
      ]
    }
  ]
}